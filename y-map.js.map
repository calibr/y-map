{"version":3,"file":"y-map.js","sources":["src/y-map.js"],"sourcesContent":["/* global Y */\n\nexport default function extendYMap (Y) {\n  class YMap extends Y.utils.CustomType {\n    constructor (os, model, contents, opContents) {\n      super()\n      this._model = model.id\n      this._parent = null\n      this._deepEventHandler = new Y.utils.EventListenerHandler()\n      this.os = os\n      this.map = Y.utils.copyObject(model.map)\n      this.contents = contents\n      this.opContents = opContents\n      this.eventHandler = new Y.utils.EventHandler(op => {\n        var oldValue\n        // key is the name to use to access (op)content\n        var key = op.struct === 'Delete' ? op.key : op.parentSub\n\n        // compute oldValue\n        if (this.opContents[key] != null) {\n          oldValue = this.os.getType(this.opContents[key])\n        } else {\n          oldValue = this.contents[key]\n        }\n        // compute op event\n        if (op.struct === 'Insert') {\n          if (op.left === null && !Y.utils.compareIds(op.id, this.map[key])) {\n            var value\n            // TODO: what if op.deleted??? I partially handles this case here.. but need to send delete event instead. somehow related to #4\n            if (op.opContent != null) {\n              value = this.os.getType(op.opContent)\n              value._parent = this._model\n              delete this.contents[key]\n              if (op.deleted) {\n                delete this.opContents[key]\n              } else {\n                this.opContents[key] = op.opContent\n              }\n            } else {\n              value = op.content[0]\n              delete this.opContents[key]\n              if (op.deleted) {\n                delete this.contents[key]\n              } else {\n                this.contents[key] = op.content[0]\n              }\n            }\n            this.map[key] = op.id\n            if (oldValue === undefined) {\n              Y.utils.bubbleEvent(this, {\n                name: key,\n                object: this,\n                type: 'add',\n                value: value\n              })\n            } else {\n              Y.utils.bubbleEvent(this, {\n                name: key,\n                object: this,\n                oldValue: oldValue,\n                type: 'update',\n                value: value\n              })\n            }\n          }\n        } else if (op.struct === 'Delete') {\n          if (Y.utils.compareIds(this.map[key], op.target)) {\n            delete this.opContents[key]\n            delete this.contents[key]\n            Y.utils.bubbleEvent(this, {\n              name: key,\n              object: this,\n              oldValue: oldValue,\n              type: 'delete'\n            })\n          }\n        } else {\n          throw new Error('Unexpected Operation!')\n        }\n      })\n    }\n    _getPathToChild (childId) {\n      return Object.keys(this.opContents).find(key =>\n        Y.utils.compareIds(this.opContents[key], childId)\n      )\n    }\n    _destroy () {\n      this.eventHandler.destroy()\n      this.eventHandler = null\n      this.contents = null\n      this.opContents = null\n      this._model = null\n      this._parent = null\n      this.os = null\n      this.map = null\n    }\n    toJSON () {\n      var obj = {}\n      for (let key in this.contents) {\n        obj[key] = this.contents[key]\n      }\n      for (let key in this.opContents) {\n        let type = this.os.getType(this.opContents[key])\n        if (type.toJSON != null) {\n          obj[key] = type.toJSON()\n        } else if (type.toString != null) {\n          obj[key] = type.toString()\n        }\n      }\n      return obj\n    }\n    get (key) {\n      // return property.\n      // if property does not exist, return null\n      // if property is a type, return it\n      if (key == null || typeof key !== 'string') {\n        throw new Error('You must specify a key (as string)!')\n      }\n      if (this.opContents[key] == null) {\n        return this.contents[key]\n      } else {\n        return this.os.getType(this.opContents[key])\n      }\n    }\n    keys () {\n      return Object.keys(this.contents).concat(Object.keys(this.opContents))\n    }\n    keysPrimitives () {\n      return Object.keys(this.contents)\n    }\n    keysTypes () {\n      return Object.keys(this.opContents)\n    }\n    /*\n      If there is a primitive (not a custom type), then return it.\n      Returns all primitive values, if propertyName is specified!\n      Note: modifying the return value could result in inconsistencies!\n        -- so make sure to copy it first!\n    */\n    getPrimitive (key) {\n      if (key == null) {\n        return Y.utils.copyObject(this.contents)\n      } else if (typeof key !== 'string') {\n        throw new Error('Key is expected to be a string!')\n      } else {\n        return this.contents[key]\n      }\n    }\n    getType (key) {\n      if (key == null || typeof key !== 'string') {\n        throw new Error('You must specify a key (as string)!')\n      } else if (this.opContents[key] != null) {\n        return this.os.getType(this.opContents[key])\n      } else {\n        return null\n      }\n    }\n    delete (key) {\n      var right = this.map[key]\n      if (right != null) {\n        var del = {\n          target: right,\n          struct: 'Delete'\n        }\n        var eventHandler = this.eventHandler\n        var modDel = Y.utils.copyObject(del)\n        modDel.key = key\n        this.os.requestTransaction(function () {\n          eventHandler.awaitOps(this, this.applyCreatedOperations, [[del]])\n        })\n        // always remember to do that after this.os.requestTransaction\n        // (otherwise values might contain a undefined reference to type)\n        eventHandler.awaitAndPrematurelyCall([modDel])\n      }\n    }\n    set (key, value) {\n      // set property.\n      // if property is a type, return it\n      // if not, apply immediately on this type an call event\n\n      var right = this.map[key] || null\n      var insert = {\n        id: this.os.getNextOpId(1),\n        left: null,\n        right: right,\n        origin: null,\n        parent: this._model,\n        parentSub: key,\n        struct: 'Insert'\n      }\n      var eventHandler = this.eventHandler\n      var typeDefinition = Y.utils.isTypeDefinition(value)\n      if (typeDefinition !== false) {\n        var type = this.os.createType(typeDefinition)\n        insert.opContent = type._model\n        // construct a new type\n        this.os.requestTransaction(function () {\n          eventHandler.awaitOps(this, this.applyCreatedOperations, [[insert]])\n        })\n        // always remember to do that after this.os.requestTransaction\n        // (otherwise values might contain a undefined reference to type)\n        eventHandler.awaitAndPrematurelyCall([insert])\n        return type\n      } else {\n        insert.content = [value]\n        this.os.requestTransaction(function () {\n          eventHandler.awaitOps(this, this.applyCreatedOperations, [[insert]])\n        })\n        // always remember to do that after this.os.requestTransaction\n        // (otherwise values might contain a undefined reference to type)\n        eventHandler.awaitAndPrematurelyCall([insert])\n        return value\n      }\n    }\n    observe (f) {\n      this.eventHandler.addEventListener(f)\n    }\n    observeDeep (f) {\n      this._deepEventHandler.addEventListener(f)\n    }\n    unobserve (f) {\n      this.eventHandler.removeEventListener(f)\n    }\n    unobserveDeep (f) {\n      this._deepEventHandler.removeEventListener(f)\n    }\n    /*\n      Observe a path.\n\n      E.g.\n      ```\n      o.set('textarea', Y.TextBind)\n      o.observePath(['textarea'], function(t){\n        // is called whenever textarea is replaced\n        t.bind(textarea)\n      })\n\n      returns a function that removes the observer from the path.\n    */\n    observePath (path, f) {\n      var self = this\n      var propertyName\n      function observeProperty (event) {\n        // call f whenever path changes\n        if (event.name === propertyName) {\n          // call this also for delete events!\n          f(self.get(propertyName))\n        }\n      }\n\n      if (path.length < 1) {\n        f(this)\n        return function () {}\n      } else if (path.length === 1) {\n        propertyName = path[0]\n        f(self.get(propertyName))\n        this.observe(observeProperty)\n        return function () {\n          self.unobserve(f)\n        }\n      } else {\n        var deleteChildObservers\n        var resetObserverPath = function () {\n          var map = self.get(path[0])\n          if (!(map instanceof YMap)) {\n            // its either not defined or a primitive value / not a map\n            map = self.set(path[0], Y.Map)\n          }\n          deleteChildObservers = map.observePath(path.slice(1), f)\n        }\n        var observer = function (event) {\n          if (event.name === path[0]) {\n            if (deleteChildObservers != null) {\n              deleteChildObservers()\n            }\n            if (event.type === 'add' || event.type === 'update') {\n              resetObserverPath()\n            }\n            // TODO: what about the delete events?\n          }\n        }\n        self.observe(observer)\n        resetObserverPath()\n        // returns a function that deletes all the child observers\n        // and how to unobserve the observe from this object\n        return function () {\n          if (deleteChildObservers != null) {\n            deleteChildObservers()\n          }\n          self.unobserve(observer)\n        }\n      }\n    }\n    _changed (transaction, op) {\n      if (op.struct === 'Delete') {\n        if (op.key == null) {\n          var target = transaction.getOperation(op.target)\n          op.key = target.parentSub\n        }\n      } else if (op.opContent != null) {\n        transaction.store.initType.call(transaction, op.opContent)\n      }\n      this.eventHandler.receivedOp(op)\n    }\n  }\n  Y.extend('Map', new Y.utils.CustomTypeDefinition({\n    name: 'Map',\n    class: YMap,\n    struct: 'Map',\n    initType: function YMapInitializer (os, model) {\n      var contents = {}\n      var opContents = {}\n      var map = model.map\n      for (var name in map) {\n        var op = this.getOperation(map[name])\n        if (op.deleted) continue\n        if (op.opContent != null) {\n          opContents[name] = op.opContent\n          var type = this.store.initType.call(this, op.opContent)\n          type._parent = model.id\n        } else {\n          contents[name] = op.content[0]\n        }\n      }\n      return new YMap(os, model, contents, opContents)\n    },\n    createType: function YMapCreator (os, model) {\n      return new YMap(os, model, {}, {})\n    }\n  }))\n}\n\nif (typeof Y !== 'undefined') {\n  extendYMap(Y)\n}\n"],"names":["extendYMap","Y","YMap","os","model","contents","opContents","_model","id","_parent","_deepEventHandler","utils","EventListenerHandler","map","copyObject","eventHandler","EventHandler","oldValue","key","op","struct","parentSub","_this","getType","left","compareIds","value","opContent","deleted","content","undefined","bubbleEvent","Error","target","childId","Object","keys","this","find","_this2","destroy","obj","type","toJSON","toString","concat","right","del","modDel","requestTransaction","awaitOps","applyCreatedOperations","awaitAndPrematurelyCall","insert","getNextOpId","typeDefinition","isTypeDefinition","createType","f","addEventListener","removeEventListener","path","observeProperty","event","name","propertyName","self","get","length","observe","unobserve","deleteChildObservers","resetObserverPath","set","Map","observePath","slice","observer","transaction","getOperation","store","initType","call","receivedOp","CustomType","extend","CustomTypeDefinition"],"mappings":"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"}